#!/bin/bash
# c4.xlarge high network performance, 7.5 G - ~$0.06/h * TAX = ~$0,078
# t3.large moderate network performance, 3.5 G - ~$0.03/h * 1,33 (TAX) ~= $0.04
# c5d.large up to 10G perfromance 4G RAM, higher computing power

#----------------------Initialization---------------------------#
if [ ! -f .env ]; then
  echo 'Missing local.env file!'
  exit 1
fi

# "Import" .env file vars.
source local.env

aws s3 ls ${S3_URI} &> /dev/null
if [[ ! $? = 0 ]]; then
  echo 'Missing config variable S3_URI, or invalid uri!'
  exit 255
fi
#---------------------------------------------------------------#
set -e

request() {
  config_file=${1:? Path to configuration file required!}
  i_type=${2:-t3.large}

  if [[ $i_type = 't3.large' ]]; then
    echo 'Instance type set to default: t3.large'
  fi

  echo 'Requesting instance...'
  launch_c=$(sed "s/{user_data}/$(cat user-data.sh | base64 -w 0)/g" ${config_file})
  launch_c=$(sed "s/{instance_type}/${i_type}/g" <<< ${launch_c})
  aws ec2 request-spot-instances --spot-price 0.065 --launch-specification "${launch_c}"
}

cancel() {
  aws ec2 cancel-spot-instance-requests --spot-instance-request-ids $(_get-id)
  aws ec2 terminate-instances --instance-ids $(_get-ec2-id)
}

list() {
  aws ec2 describe-spot-instance-requests --filter '[{"Name": "state", "Values": ["active"]}, {"Name": "launch.group-name", "Values": ["minecraft-server"]}]'
}

_get-id() {
    list | jq .SpotInstanceRequests[].SpotInstanceRequestId -r
}

_get-ec2() {
  aws ec2 describe-instances --filter Name=spot-instance-request-id,Values=$(_get-id)
}

_get-ec2-id() {
  _get-ec2 | jq .Reservations[].Instances[].InstanceId -r
}

get-ec2-pub-ip() {
  _get-ec2 | jq .Reservations[0].Instances[0].NetworkInterfaces[0].Association.PublicIp -r
}

load-world() {
  world=${1:? World name is required!}
  ssh-ec2 aws s3 cp ${S3_URI}/${world}/world.tar.gz /home/ec2-user/minecraft-server
  ssh-ec2 tar -xzf /home/ec2-user/minecraft-server/world.tar.gz -C /home/ec2-user/minecraft-server
  ssh-ec2 rm -rf /home/ec2-user/minecraft-server/world.tar.gz
}

save-world() {
  world=${1:? World name is required!}
  ssh-ec2 tar -czf /home/ec2-user/minecraft-server/world.tar.gz /home/ec2-user/minecraft-server/world
  ssh-ec2 aws s3 cp /home/ec2-user/minecraft-server/world.tar.gz ${S3_URI}/${world}/
}

ssh-ec2() {
  ssh -o StrictHostKeyChecking=no ec2-user@$(get-ec2-pub-ip) $@
}

launch-server() {
  ssh-ec2 mc-start
}

shutdown-server() {
  ssh-ec2 pkill -f java8
}

status() {
  aws ec2 describe-instances | jq .Reservations[0].Instances[0].State 
}

case $1 in
  'request')
  shift
  request $1 $2
  ;;
  'list')
  list
  ;;
  'cancel')
  cancel
  ;;
  'load-world')
  shift
  load-world $1
  ;;
  'save-world')
  shift
  save-world $1 $2
  ;;
  'get-ec2-pub-ip')
  get-ec2-pub-ip
  ;;
  'ssh')
  ssh-ec2
  ;;
  'status')
  status
  ;;
  'server')
  shift
  case $1 in
    'launch')
    launch-server
    ;;
    'shutdown')
    shutdown-server
    ;;
    *)
    echo 'Possible values are: ./mc-server server launch|shutdown'
    ;;
  esac
  ;;
  *)
  cat <<HELP
Usage: ./mc-s <command> <arg>

Commands:
---------

request [CONFIG_FILE] [INSTANCE_TYPE]   request a spot instance, defaults to t3.large
load-world  WORLD_NAME                  provide the name of the world
save-world  WORLD_NAME                  provide the name of the world
server [launch|shutdown]                launch or shutdown minecraft server
ssh [COMMAND]                           ssh into the instance, or run a command through ssh
get-ec2-pub-ip                          get ip address of requested ec2 instance
cancel                                  cancel a spot request, delete ec2 instance
list                                    list spot requests
status                                  gives back info on instance state
HELP
  ;;
esac

set +e
